name: KOT Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x' ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          
      - name: Restore tools
        run: dotnet tool restore --tool-manifest .config/dotnet-tools.json

      - name: Build
        run: dotnet build

      - name: Check format issues
        run: dotnet format --verify-no-changes -v d

      - name: Run tests
        run: dotnet test -l html --collect:"XPlat Code Coverage" --results-directory "TestResults-${{ matrix.dotnet-version }}"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: TestResults-${{ matrix.dotnet-version }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Generate code coverage report
        run: dotnet reportgenerator -reports:"TestResults-${{ matrix.dotnet-version }}/**/*.cobertura.xml" -targetdir:".coveragereport"

      - name: Upload code coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-${{ matrix.dotnet-version }}
          path: .coveragereport
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Static Code Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION}}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY}}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin -k:"$SONAR_PROJECT_KEY" -o:"$SONAR_ORGANIZATION" -d:sonar.login="$SONAR_TOKEN" -d:sonar.host.url="$SONAR_HOST_URL" -d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"
          dotnet build --no-incremental KOF.sln
          dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'
          dotnet sonarscanner end -d:sonar.login="$SONAR_TOKEN"

        # Check the Quality Gate status.
      - name: Quality Gate
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        # Force to fail step after specific time.
        timeout-minutes: 3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: NuGet push
        run: |
          dotnet build -c Release
          dotnet pack -c Release --no-build --output .
          dotnet nuget push "*.nupkg" --api-key ${{secrets.API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate
